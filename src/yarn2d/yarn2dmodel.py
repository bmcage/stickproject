#
# Copyright (C) 2010  B. Malengier
# Copyright (C) 2010  P.Li
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

""" 
Module holding a generic diffusion model for a yarn. 
"""
#-------------------------------------------------------------------------
#
# Global Imports
#
#-------------------------------------------------------------------------
from __future__ import division
import os.path
import sys
import const
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import sets
import time

#-------------------------------------------------------------------------
#
# Local Imports
#
#-------------------------------------------------------------------------
import lib.utils.utils as utils
import lib.utils.gridutils as GridUtils
import yarn2d.config as conf
import lib.diff.diffusion as diffusion
from mycorrection import MyDiffusionTermNoCorrection
import fibersurface
from yarn2dgrid import Yarn2dGrid

#-------------------------------------------------------------------------
#
#Fipy Imports
#
#-------------------------------------------------------------------------
from fipy import *

#-------------------------------------------------------------------------
#
# DiffusionModel class 
#
#-------------------------------------------------------------------------
class Yarn2DModel(object):
    """
    yar2dmodel is a special diffusion model for a single yarn which is composed 
    by a certain amount of fibers. Firstly, one cross-section of fiber is 
    generated. Then the uniform distribution function is used to generated the 
    postions of fibers in the yarn until the number reaches our requirement.
    After that a homogeneous mesh is generated by using Gmsh.
    Only diffusion processes in a single fiber and yarn are considered. 
    ODE of scipy solve the diffusion process in the layers of DEET and permithrine
    which are on the fiber
    Fipy solve the transient diffusion problem in the whole domain
    """
    def __init__(self, config):
        """ 
        a config class must be passed in that contains the required settings
        """
        self.datatime = []
        self.cfg = config
        self.comps = self.cfg.get('general.components')
        self.Ry = self.cfg.get('domain.yarnradius')
        self.Rf = self.cfg.get('fiber.radius_fiber')
        self.scaleL = 1./self.Ry #get the scale factor for relative domain
        #computational radius
        self.radius_yarn = self.scaleL * self.Ry
        self.radius_fiber =  self.scaleL * self.Rf
        self.radius_boundlayer = self.radius_fiber/2.
        self.radius_domain = self.radius_yarn + self.radius_boundlayer
        self.cellsize_centre = self.cfg.get('domain.cellsize_centre')
        self.cellSize = self.cfg.get('domain.cellsize_fiber')
        self.number_fiber = self.cfg.get('fiber.number_fiber')
        self.time_period = self.cfg.get('time.time_period')
        self.delta_t = self.cfg.get('time.dt')
        self.steps = self.time_period / self.delta_t
        #read the initial and boundary information for fiber
        self.n_point = self.cfg.get('fiber.n_point') #discretize the fiber radius
        self.boundary_fib_left = self.cfg.get('boundary.boundary_fib_left')
        self.boundary_fib_right = self.cfg.get('boundary.boundary_fib_right')
        self.diffusion_co_l1 =  self.cfg.get('diffusion.diffusion_co_l1')
        self.diffusion_co_l2 = self.cfg.get('diffusion.diffusion_co_l2')
        self.init_conc1_fiber = eval(self.cfg.get('initial.init_conc1_fiber'))
        self.transfer_conc1 = self.cfg.get('transfer.transfer_conc1')

    def create_mesh(self):
        """
        Create a mesh for use in the model
        """
        self.grid = Yarn2dGrid(self.cfg)
        print self.cfg.get('general.read'), type(self.cfg.get('general.read'))
        print not self.cfg.get('general.read')
        self.mesh2d = self.grid.mesh_2d_generate(filename='yarn.geo',
                                regenerate=not self.cfg.get('general.read'))
    
    def initial_yarn2d(self):
        self.init_conc1 = self.cfg.get('initial.init_conc1')
        self.conc1 = CellVariable(name = "solution concentration1", 
                    mesh = self.mesh2d, value = self.init_conc1)
        self.viewer = None
        self.viewer = Viewer(vars = self.conc1, datamin = 0., datamax =0.005)

    def solve_single_component_fiber(self):
        """
        Solve the diffusion process on the fiber. 
        &C/&t = 1/r * &(Dr&C/&r) / &r
        The diffusion coefficient is constant. The finite volume method is used to
        discretize the right side of equation. The mesh in this 1-D condition is 
        uniform
        """
        self.beginning_point = self.cfg.get('fiber.beginning_point')
        self.end_point = self.cfg.get('fiber.end_point')
        self.diffusion_surface = sp.empty(self.n_point, float)
        scale_beginning = self.beginning_point * self.scaleL
        print 'this is the scale beginning point:',scale_beginning
        scale_end = self.end_point * self.scaleL
        print 'this is the scale end point', scale_end
        self.grid = sp.linspace(scale_beginning, scale_end, self.n_point)
        #self.grid = grid
        initial_c1 = sp.empty(self.n_point, float)
        discretization_t = self.steps + 1
        self.times = sp.linspace(0, self.time_period, discretization_t)
        for i in sp.arange(0, self.n_point, 1):
            if i <= (self.n_point - 1) / 2:
                initial_c1[i] = self.init_conc1_fiber(i)[0] 
                self.diffusion_surface[i] = self.diffusion_co_l1
            elif i > (self.n_point - 1) /2:
                initial_c1[i] = self.init_conc1_fiber(i)[1] 
                self.diffusion_surface[i] = self.diffusion_co_l2
        print 'initial condition is:', initial_c1
        self.fiber_conc1 = fibersurface.Solving1DFiber(self.grid, initial_c1, 
                           self.boundary_fib_left, self.boundary_fib_right,
                           self.diffusion_co_l1, self.diffusion_co_l2)
        self.fiber_conc1.solver_c(self.times)
        print self.fiber_conc1.conc1
        self.fiber_surface = sp.empty(len(self.times), float)
        for i in sp.arange(1,len(self.times) + 1,1):
            self.fiber_surface[i - 1] = self.fiber_conc1.conc1[i - 1][-1]
        print self.fiber_surface[:]

    def solve_single_component(self):
        """
        The DEET diffusion process is divided into two parts:
        (1) DEET diffuses through the layer containing permithrine on the fiber 
        and reache the surface;
        (2) DEET begins to diffuse in the void space of  yarn
        So it means that the boundary condition of fiber has two steps:
        (1) When the DEET does not reach the surface of fiber, the inner and out
        boundaries are no flux boundary condition;
        (2) When the DEET reaches surface, the evaporation happens. So the boundaries 
        of fiber and yarn are changed to constant flux (Neumann boundary condition)
        """
        self.diffusion_DEET = self.cfg.get('diffusion.diffusion_conc1')
        #input the trsient equation of diffusion        
        self.eq = TransientTerm() == MyDiffusionTermNoCorrection(coeff = self.diffusion_DEET)
        #get the position of the boundary faces
        xfc, yfc = self.mesh2d.getFaceCenters()
        xcc, ycc = self.mesh2d.getCellCenters()
        face_in = ((self.mesh2d.getExteriorFaces()) & 
                    (sp.power(xfc,2) + sp.power(yfc,2) \
                        < (self.radius_domain - self.radius_boundlayer)**2))
        face_ex = (~face_in) & (self.mesh2d.getExteriorFaces())
        i1 = 0
        self.initial_t = 0.
        initial_c2 = sp.zeros(self.n_point,float)
        filename1 = 'concentration_out.gz'
        filepath1 = utils.OUTPUTDIR + os.sep + filename1
        conc1_out_yarn = sp.zeros(1, float)
        for i in sp.arange(0, self.steps, 1):
            determine_value = self.fiber_surface[i]
            if determine_value <= 0:
                surface_value = determine_value
                BCs = (FixedFlux(face_ex, value = sp.zeros(len(face_ex), float)), FixedValue(face_in, value = 0),)
                self.eq.solve(var = self.conc1, boundaryConditions = BCs, dt = self.delta_t, )
                print 'time = ', (i+1) * self.delta_t
                #raw_input("Finshed <return>.....")
            elif determine_value > 0:#the evaporation happens on the surface of the layer
                i1 = i1 + 1
                if i1 == 1:
                    surface_value = determine_value
                    self.boundary_fib_right = self.transfer_conc1 * surface_value
                    boundary_in_yarn = self.boundary_fib_right
                    BCs = (FixedFlux(face_ex, value = 0.), FixedFlux(face_in, value = boundary_in_yarn),)
                    self.eq.solve(var = self.conc1, boundaryConditions = BCs, dt = self.delta_t, )
                    try:
                        self.conc_face_ex = self.conc1.getArithmeticFaceValue()
                        print self.conc_face_ex
                    except ValueError:
                        print 'the method has problem'
                    for i2 in sp.arange(0, len(self.grid), 1):
                        initial_c2[i2] = self.fiber_conc1.conc1[i][i2] * self.grid[i2]
                    print "the first initial condition for fipy in 1d:", initial_c2
                    #using fipy to solve 1D problem in fiber
                    self.delta_r = self.grid[1] - self.grid[0]
                    self.mesh_fiber = Grid1D(nx = self.n_point, dx = self.delta_r)
                    print 'length of mesh', self.mesh_fiber
                    solution_fiber = CellVariable(name = "solution variable", 
                                        mesh = self.mesh_fiber,
                                        value = initial_c2, hasOld = 1)
                    print 'the length of solution:', len(solution_fiber)
                    print 'length of the diffusion coefficient', len(self.diffusion_surface)
                    print len(self.grid)
                    print 
                    BCs_fiber = (FixedFlux(faces = self.mesh_fiber.getFacesRight(), 
                                value = self.boundary_fib_right),
                                 FixedFlux(faces = self.mesh_fiber.getFacesLeft(), value = 0.0))
                    eqX_fiber = TransientTerm() == DiffusionTerm(coeff = self.diffusion_surface * sp.exp(-solution_fiber))
                    solution_fiber.setValue(0.)
                    res = 1e+1
                    while res > 1e-8:
                        res = eqX_fiber.sweep(var = solution_fiber, boundaryConditions = BCs_fiber,
                                                dt = self.delta_t)
                        print "the residual value", res
                        #solution_fiber.updateOld()
                    print solution_fiber
                    self.domain_conc1 = solution_fiber#self.fiber_conc1.conc1
                    surface_value = solution_fiber[-1]#self.domain_conc1[-1]
                    self.initial_t = self.initial_t + self.delta_t
                    print 'time = ', (i+1) * self.delta_t
                    #raw_input("Finshed <return>.....")
                elif i1 > 1:
                    self.boundary_fib_right = self.transfer_conc1 * surface_value
                    boundary_in_yarn = self.boundary_fib_right / self.grid[-1]
                    print 'the inner boundary of yarn', boundary_in_yarn
                    conc_face_ex = sp.zeros(len(face_ex), float)
                    conc_face_ex = 0.01 * self.conc_face_ex
                    BCs = (FixedFlux(face_ex, value = conc_face_ex), FixedFlux(face_in, value = -boundary_in_yarn),)
                    self.eq.solve(var = self.conc1, boundaryConditions = BCs, dt = self.delta_t, ) 
                    initial_c2 = self.domain_conc1 * self.grid[:]
                    self.conc_face_ex = self.conc1.getArithmeticFaceValue()
                    value_face_out = np.empty(len(face_ex), float)#save the concentration at the face-out
                    determine_out = np.empty(len(face_ex), bool)#save the boolean value at the face-out
                    for i_out in sp.arange(0, len(face_ex), 1):
                        value_face_out[i_out] = float(self.conc_face_ex[i_out])
                        determine_out[i_out] = face_ex[i_out]
                    value_out_record = value_face_out[determine_out]#get the value at the face out
                    conc1_average_out = np.sum(value_out_record) / len(value_out_record)
                    conc1_out_yarn = np.append(conc1_out_yarn, conc1_average_out)
                    if (i+1) * self.delta_t == 30:
                        dump.write({'space_position': self.grid, 'conc': initial_c2},
                                    filename = utils.OUTPUTDIR + os.sep + 'fiber_layer.gz',
                                    extension = '.gz')
                    BCs_fiber = (FixedFlux(faces = self.mesh_fiber.getFacesRight(), value = self.boundary_fib_right),
                                 FixedFlux(faces = self.mesh_fiber.getFacesLeft(), value = 0.0))
                    res = 1e+1
                    solution_fiber.updateOld()
                    eqX_fiber = TransientTerm() == DiffusionTerm(coeff = self.diffusion_surface * sp.exp(-solution_fiber))
                    """
                    eqX_fiber = TransientTerm() == DiffusionTerm(coeff = (self.diffusion_co_l1 + (self.diffusion_co_l2 - \
                                                    self.diffusion_co_l1)/(1 + sp.exp(-100 * (self.grid - (self.beginning_point * self.scaleL + \
                                                    self.grid[(self.n_point - 1)]))))) * sp.exp(-solution_fiber))
                    """
                    while res > 1e-8:
                        res = eqX_fiber.sweep(var = solution_fiber, boundaryConditions = BCs_fiber,
                                                dt = self.delta_t)
                    print "solution of fipy1d:", solution_fiber
                    self.domain_conc1 = solution_fiber#self.fiber_conc1.conc1
                    surface_value = solution_fiber[-1]#self.domain_conc1[-1]                               
                    self.initial_t = self.initial_t + self.delta_t
                    print 'time = ', (i+1) * self.delta_t
                    #raw_input("Finshed <return>.....")
                    
            if self.viewer is not None:
                self.viewer.plot()
        dump.write({'time_step': self.times, 'conc_out': conc1_out_yarn},
                                filename = filepath1, extension = '.gz')
        raw_input("Finshed <return>.....")
        #self.yarn_around.close()
    
    def run(self):        
        self.create_mesh()
        self.initial_yarn2d()
        self.solve_single_component_fiber()
        self.solve_single_component()
        
